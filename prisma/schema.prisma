// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique
  mobile    String?  @unique
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  reviews Review[]

  senders   Chat[] @relation("sender")
  receivers Chat[] @relation("receiver")
  Posts     Post[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  AGENT

  @@map("roles")
}

model Review {
  id      Int     @id @default(autoincrement())
  user    User    @relation(fields: [userId], references: [id])
  userId  Int     @map("user_id")
  rating  Decimal @db.Decimal(4, 1)
  comment String  @db.LongText

  @@map("reviews")
}

model Chat {
  id       Int  @id @default(autoincrement())
  sender   User @relation(name: "sender", fields: [senderId], references: [id])
  senderId Int  @map("sender_id")

  receiver   User     @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId Int      @map("receiver_id")
  message    String   @db.VarChar(255)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@map("chats")
}

model Post {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  expiresAt   DateTime @map("expires_at")
  postStatus  Boolean  @default(false) @map("post_status")
  totalViewer Int      @default(0) @map("total_viewer")

  room     Room?     @relation(fields: [roomId], references: [id])
  roomId   Int       @unique @map("room_id")
  payments Payment[]
  viewers  Viewer[]

  @@map("posts")
}

model Room {
  id          Int     @id @default(autoincrement())
  price       Decimal @db.Decimal(10, 2)
  contract    Int
  roomNumber  String  @map("room_number")
  roomSize    Decimal @map("room_size") @db.Decimal(10, 2)
  bedroom     Int
  bathroom    Int
  floor       String
  building    String
  isAvailable Boolean @default(true) @map("is_available")
  description String? @db.TinyText

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  post           Post?
  roomFacilities RoomFacility[]
  roomImages     RoomImage[]

  condo   Condo @relation(fields: [condoId], references: [id])
  condoId Int   @map("condo_id")

  @@map("rooms")
}

model Payment {
  id        Int     @id @default(autoincrement())
  post      Post    @relation(fields: [postId], references: [id])
  postId    Int     @map("post_id")
  paymentId String  @map("payment_id")
  amount    Decimal @db.Decimal(10, 2)
  days      Int

  @@map("payments")
}

model Condo {
  id         Int      @id @default(autoincrement())
  nameTh     String   @map("name_th")
  nameEn     String   @map("name_en")
  lat        String
  long       String
  location   String
  districtId Int      @map("district_id")
  district   District @relation(fields: [districtId], references: [id])
  provinceId Int      @map("province_id")
  province   Province @relation(fields: [provinceId], references: [id])
  condoImage String   @map("condo_image")
  postCode   String   @map("post_code")
  rooms      Room[]

  @@map("condos")
}

model District {
  id       Int     @id @default(autoincrement())
  district String
  condos   Condo[]

  @@map("districts")
}

model Province {
  id       Int     @id @default(autoincrement())
  province String
  condos   Condo[]

  @@map("provinces")
}

model RoomFacility {
  id Int @id @default(autoincrement())

  room       Room     @relation(fields: [roomId], references: [id])
  roomId     Int      @map("room_id")
  facility   Facility @relation(fields: [facilityId], references: [id])
  facilityId Int      @map("facility_id")

  @@map("room_facilities")
}

model Facility {
  id             Int            @id @default(autoincrement())
  name           String
  roomFacilities RoomFacility[]

  @@map("facilities")
}

model RoomImage {
  id        Int    @id @default(autoincrement())
  room      Room   @relation(fields: [roomId], references: [id])
  roomId    Int    @map("room_id")
  roomImage String @map("room_image")

  @@map("room_images")
}

model Viewer {
  id        Int    @id @default(autoincrement())
  post      Post   @relation(fields: [postId], references: [id])
  postId    Int
  ipAddress String @map("ip_address")

  @@map("viewers")
}
